{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ONKAR\\\\OneDrive\\\\Desktop\\\\SEM-4\\\\Projects\\\\DBMS\\\\crop sowing guide\\\\frontend\\\\src\\\\components\\\\Area.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../css/CropDistribution.css\";\nimport Chart from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Area(props) {\n  _s();\n  let [cropdata, setCropdata] = useState([]);\n  var chart;\n  const fetchCropData = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/getArea\", {\n        method: \"post\",\n        body: JSON.stringify({}),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await response.json();\n      setCropdata(data.data);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  const createChart = () => {\n    const ctx = document.getElementById(\"myChartArea\");\n    chart = new Chart(ctx, {\n      type: \"bar\",\n      data: {\n        labels: cropdata.map(item => item._id),\n        datasets: [{\n          label: \"Crop Area in \",\n          data: cropdata.map(item => item.totalArea),\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  };\n  useEffect(() => {\n    fetchCropData();\n  }, []);\n  useEffect(() => {\n    if (cropdata.length > 0) {\n      if (chart) {\n        chart.destroy();\n      }\n      createChart();\n    }\n  }, [cropdata]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"crop_sowingdata_bar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graphBlock\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            fontFamily: \"sans-serif\",\n            fontWeight: 600,\n            color: \"blueviolet\"\n          },\n          children: \"Area Sowing Distribution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: 800,\n            height: 400\n          },\n          children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n            id: \"myChartArea\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Area, \"B65eAZ7NpBjXarWsZloKxByJmc4=\");\n_c = Area;\nvar _c;\n$RefreshReg$(_c, \"Area\");","map":{"version":3,"names":["React","useEffect","useState","Link","Chart","jsxDEV","_jsxDEV","Fragment","_Fragment","Area","props","_s","cropdata","setCropdata","chart","fetchCropData","response","fetch","method","body","JSON","stringify","headers","data","json","error","console","createChart","ctx","document","getElementById","type","labels","map","item","_id","datasets","label","totalArea","borderWidth","options","scales","y","beginAtZero","length","destroy","children","className","style","fontFamily","fontWeight","color","fileName","_jsxFileName","lineNumber","columnNumber","width","height","id","_c","$RefreshReg$"],"sources":["C:/Users/ONKAR/OneDrive/Desktop/SEM-4/Projects/DBMS/crop sowing guide/frontend/src/components/Area.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport \"../css/CropDistribution.css\";\r\nimport Chart from \"chart.js/auto\";\r\n\r\nexport default function Area(props) {\r\n  let [cropdata, setCropdata] = useState([]);\r\n  var chart;\r\n  const fetchCropData = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/getArea\", {\r\n        method: \"post\",\r\n        body: JSON.stringify({}),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n      const data = await response.json();\r\n      setCropdata(data.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n\r\n  const createChart = () => {\r\n    const ctx = document.getElementById(\"myChartArea\");\r\n    chart = new Chart(ctx, {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: cropdata.map(item=>item._id),\r\n        datasets: [\r\n          {\r\n            label: \"Crop Area in \",\r\n            data: cropdata.map(item=>item.totalArea),\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCropData();\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    if (cropdata.length > 0) {\r\n        if(chart){\r\n          chart.destroy();\r\n        }\r\n          createChart();\r\n        }\r\n  }, [cropdata]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"crop_sowingdata_bar\">\r\n        <div className=\"graphBlock\">\r\n          <h2\r\n            style={{\r\n              fontFamily: \"sans-serif\",\r\n              fontWeight: 600,\r\n              color: \"blueviolet\",\r\n            }}\r\n          >\r\n           Area Sowing Distribution\r\n          </h2>\r\n          <div style={{ width: 800, height: 400 }}>\r\n            <canvas id=\"myChartArea\"></canvas>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}