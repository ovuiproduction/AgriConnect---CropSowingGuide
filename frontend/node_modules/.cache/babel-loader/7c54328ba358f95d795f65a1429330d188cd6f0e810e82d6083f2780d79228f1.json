{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ONKAR\\\\OneDrive\\\\Desktop\\\\crop sowing guide\\\\frontend\\\\src\\\\components\\\\RegionCropDistribution.jsx\";\nimport react from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function RegionCropdistribution(props) {\n  const {\n    state,\n    crops,\n    division\n  } = props;\n  // const croplist = Object.keys(crops);\n  // let [cropdata, setCropdata] = useState([]);\n  // const fetchCropData = async () => {\n  //   try {\n  //     const response = await fetch(\"http://localhost:5000/statecropreview\", {\n  //       method: \"post\",\n  //       body: JSON.stringify({ state: currstate, crops: crops }),\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //       },\n  //     });\n  //     const data = await response.json();\n  //     setCropdata(data.data);\n  //   } catch (error) {\n  //     console.error(\"Error fetching data:\", error);\n  //   }\n  // };\n  // const createChart = () => {\n  //   const ctx = document.getElementById(\"myChart\");\n  //   new Chart(ctx, {\n  //     type: \"bar\",\n  //     data: {\n  //       labels: croplist,\n  //       datasets: [\n  //         {\n  //           label: \"Crop area\",\n  //           data: cropdata,\n  //           borderWidth: 1,\n  //         },\n  //       ],\n  //     },\n  //     options: {\n  //       scales: {\n  //         y: {\n  //           beginAtZero: true,\n  //         },\n  //       },\n  //     },\n  //   });\n  // };\n\n  // useEffect(() => {\n  //   fetchCropData();\n  // }, []);\n\n  // useEffect(() => {\n  //   if (cropdata.length > 0) {\n  //     createChart();\n  //   }\n  // }, [cropdata]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: division\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_c = RegionCropdistribution;\nvar _c;\n$RefreshReg$(_c, \"RegionCropdistribution\");","map":{"version":3,"names":["react","jsxDEV","_jsxDEV","Fragment","_Fragment","RegionCropdistribution","props","state","crops","division","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ONKAR/OneDrive/Desktop/crop sowing guide/frontend/src/components/RegionCropDistribution.jsx"],"sourcesContent":["import react from \"react\";\r\n\r\nexport default function RegionCropdistribution(props){\r\n    const {state ,crops,division} = props;\r\n    // const croplist = Object.keys(crops);\r\n    // let [cropdata, setCropdata] = useState([]);\r\n    // const fetchCropData = async () => {\r\n    //   try {\r\n    //     const response = await fetch(\"http://localhost:5000/statecropreview\", {\r\n    //       method: \"post\",\r\n    //       body: JSON.stringify({ state: currstate, crops: crops }),\r\n    //       headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //       },\r\n    //     });\r\n    //     const data = await response.json();\r\n    //     setCropdata(data.data);\r\n    //   } catch (error) {\r\n    //     console.error(\"Error fetching data:\", error);\r\n    //   }\r\n    // };\r\n    // const createChart = () => {\r\n    //   const ctx = document.getElementById(\"myChart\");\r\n    //   new Chart(ctx, {\r\n    //     type: \"bar\",\r\n    //     data: {\r\n    //       labels: croplist,\r\n    //       datasets: [\r\n    //         {\r\n    //           label: \"Crop area\",\r\n    //           data: cropdata,\r\n    //           borderWidth: 1,\r\n    //         },\r\n    //       ],\r\n    //     },\r\n    //     options: {\r\n    //       scales: {\r\n    //         y: {\r\n    //           beginAtZero: true,\r\n    //         },\r\n    //       },\r\n    //     },\r\n    //   });\r\n    // };\r\n  \r\n    // useEffect(() => {\r\n    //   fetchCropData();\r\n    // }, []);\r\n  \r\n    // useEffect(() => {\r\n    //   if (cropdata.length > 0) {\r\n    //     createChart();\r\n    //   }\r\n    // }, [cropdata]);\r\n    return(\r\n        <>\r\n        <h1>{state}</h1>\r\n        <h2>{division}</h2>\r\n        </>\r\n    )\r\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,eAAe,SAASC,sBAAsBA,CAACC,KAAK,EAAC;EACjD,MAAM;IAACC,KAAK;IAAEC,KAAK;IAACC;EAAQ,CAAC,GAAGH,KAAK;EACrC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA,oBACIJ,OAAA,CAAAE,SAAA;IAAAM,QAAA,gBACAR,OAAA;MAAAQ,QAAA,EAAKH;IAAK;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChBZ,OAAA;MAAAQ,QAAA,EAAKD;IAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA,eACjB,CAAC;AAEX;AAACC,EAAA,GA1DuBV,sBAAsB;AAAA,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}