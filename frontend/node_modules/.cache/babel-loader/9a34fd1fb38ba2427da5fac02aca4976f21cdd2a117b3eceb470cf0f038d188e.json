{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ONKAR\\\\OneDrive\\\\Desktop\\\\crop sowing guide\\\\frontend\\\\src\\\\components\\\\CropDistribution.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CropDistribution(props) {\n  _s();\n  let [cropdata, setCropdata] = useState([]);\n  const {\n    state,\n    crop\n  } = props;\n  const fetchCropData = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/cropsowingratio\", {\n        method: \"post\",\n        body: JSON.stringify({\n          state: state,\n          crop: crop\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await response.json();\n      setCropdata(data.data);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  const createChart = () => {\n    const ctx = document.getElementById('myChart');\n    new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: ['West Maharashtra', 'Konkan', 'Vidarbha', 'Marathwada'],\n        datasets: [{\n          label: 'Crop area',\n          data: cropdata,\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  };\n  useEffect(() => {\n    fetchCropData();\n  }, []);\n  useEffect(() => {\n    if (cropdata.length > 0) {\n      createChart();\n    }\n  }, [cropdata]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"prevyeargraph\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          fontFamily: 'sans-serif',\n          fontWeight: 600,\n          color: 'blueviolet'\n        },\n        children: crop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: 800,\n          height: 400\n        },\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          id: \"myChart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(CropDistribution, \"B65eAZ7NpBjXarWsZloKxByJmc4=\");\n_c = CropDistribution;\nvar _c;\n$RefreshReg$(_c, \"CropDistribution\");","map":{"version":3,"names":["React","useEffect","useState","Chart","jsxDEV","_jsxDEV","Fragment","_Fragment","CropDistribution","props","_s","cropdata","setCropdata","state","crop","fetchCropData","response","fetch","method","body","JSON","stringify","headers","data","json","error","console","createChart","ctx","document","getElementById","type","labels","datasets","label","borderWidth","options","scales","y","beginAtZero","length","children","className","style","fontFamily","fontWeight","color","fileName","_jsxFileName","lineNumber","columnNumber","width","height","id","_c","$RefreshReg$"],"sources":["C:/Users/ONKAR/OneDrive/Desktop/crop sowing guide/frontend/src/components/CropDistribution.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default function CropDistribution(props) {\r\n    let [cropdata, setCropdata] = useState([]);\r\n    const {state,crop} = props;\r\n\r\n    const fetchCropData = async () => {\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/cropsowingratio\", {\r\n                method: \"post\",\r\n                body: JSON.stringify({state:state,crop:crop}),\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n            });\r\n            const data = await response.json();\r\n            setCropdata(data.data);\r\n        } catch (error) {\r\n            console.error(\"Error fetching data:\", error);\r\n        }\r\n    };\r\n\r\n    const createChart = () => {\r\n        const ctx = document.getElementById('myChart');\r\n        new Chart(ctx, {\r\n            type: 'bar',\r\n            data: {\r\n                labels: ['West Maharashtra','Konkan','Vidarbha','Marathwada'],\r\n                datasets: [{\r\n                    label: 'Crop area',\r\n                    data: cropdata, \r\n                    borderWidth: 1\r\n                }]\r\n            },\r\n            options: {\r\n                scales: {\r\n                    y: {\r\n                        beginAtZero: true\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchCropData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (cropdata.length > 0) {\r\n            createChart();\r\n        }\r\n    }, [cropdata]);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"prevyeargraph\">\r\n                <h2 style={{ fontFamily: 'sans-serif', fontWeight: 600, color: 'blueviolet' }}>{crop}</h2>\r\n                <div style={{ width: 800, height: 400 }}>\r\n                    <canvas id=\"myChart\"></canvas>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}