{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ONKAR\\\\OneDrive\\\\Desktop\\\\SEM-4\\\\Projects\\\\DBMS\\\\crop sowing guide\\\\frontend\\\\src\\\\components\\\\StateArea.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"../css/CropDistribution.css\";\nimport Chart from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function StateArea(props) {\n  _s();\n  const {\n    state\n  } = props;\n  let [cropdata, setCropdata] = useState([]);\n  var barchart;\n  const fetchCropData = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/getAreaState\", {\n        method: \"post\",\n        body: JSON.stringify({\n          state: state\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await response.json();\n      setCropdata(data.data);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  const createChart = () => {\n    if (chart) chart.destroy();\n    const barctx = document.getElementById(\"mybarPlot\");\n    barchart = new Chart(barctx, {\n      type: \"bar\",\n      data: {\n        labels: cropdata.map(item => item._id),\n        datasets: [{\n          label: \"Area Cultivated with Crops in Hectares\",\n          data: cropdata.map(item => item.totalArea),\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  };\n  useEffect(() => {\n    fetchCropData();\n  }, []);\n  useEffect(() => {\n    if (cropdata.length > 0) {\n      cropdata.sort((a, b) => b.totalArea - a.totalArea);\n      if (barchart) chart.destroy();\n      createChart();\n    }\n  }, [cropdata]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"myChart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(StateArea, \"B65eAZ7NpBjXarWsZloKxByJmc4=\");\n_c = StateArea;\nvar _c;\n$RefreshReg$(_c, \"StateArea\");","map":{"version":3,"names":["React","useEffect","useState","Chart","jsxDEV","_jsxDEV","Fragment","_Fragment","StateArea","props","_s","state","cropdata","setCropdata","barchart","fetchCropData","response","fetch","method","body","JSON","stringify","headers","data","json","error","console","createChart","chart","destroy","barctx","document","getElementById","type","labels","map","item","_id","datasets","label","totalArea","borderWidth","options","scales","y","beginAtZero","length","sort","a","b","children","className","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ONKAR/OneDrive/Desktop/SEM-4/Projects/DBMS/crop sowing guide/frontend/src/components/StateArea.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"../css/CropDistribution.css\";\r\nimport Chart from \"chart.js/auto\";\r\n\r\nexport default function StateArea(props) {\r\n  const {state} = props;\r\n  let [cropdata, setCropdata] = useState([]);\r\n  var barchart;\r\n  const fetchCropData = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/getAreaState\", {\r\n        method: \"post\",\r\n        body: JSON.stringify({state:state}),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n      const data = await response.json();\r\n      setCropdata(data.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n\r\n  const createChart = () => {\r\n    if(chart) chart.destroy();\r\n    const barctx = document.getElementById(\"mybarPlot\");\r\n    barchart = new Chart(barctx, {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: cropdata.map(item=>item._id),\r\n        datasets: [\r\n          {\r\n            label: \"Area Cultivated with Crops in Hectares\",\r\n            data: cropdata.map(item=>item.totalArea),\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n            },\r\n          },\r\n      },\r\n    });\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    fetchCropData();\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    if (cropdata.length > 0) {\r\n          cropdata.sort((a,b)=>b.totalArea-a.totalArea);\r\n          if(barchart) chart.destroy();\r\n          createChart();\r\n        }\r\n  }, [cropdata]);\r\n\r\n  return (\r\n    <>\r\n        <div className=\"graph\">\r\n        <canvas id=\"myChart\"></canvas>\r\n        </div>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,6BAA6B;AACpC,OAAOC,KAAK,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElC,eAAe,SAASC,SAASA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACvC,MAAM;IAACC;EAAK,CAAC,GAAGF,KAAK;EACrB,IAAI,CAACG,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,IAAIY,QAAQ;EACZ,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;QACjEC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAACV,KAAK,EAACA;QAAK,CAAC,CAAC;QACnCW,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClCX,WAAW,CAACU,IAAI,CAACA,IAAI,CAAC;IACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,MAAME,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAGC,KAAK,EAAEA,KAAK,CAACC,OAAO,CAAC,CAAC;IACzB,MAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC;IACnDlB,QAAQ,GAAG,IAAIX,KAAK,CAAC2B,MAAM,EAAE;MAC3BG,IAAI,EAAE,KAAK;MACXV,IAAI,EAAE;QACJW,MAAM,EAAEtB,QAAQ,CAACuB,GAAG,CAACC,IAAI,IAAEA,IAAI,CAACC,GAAG,CAAC;QACpCC,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,wCAAwC;UAC/ChB,IAAI,EAAEX,QAAQ,CAACuB,GAAG,CAACC,IAAI,IAAEA,IAAI,CAACI,SAAS,CAAC;UACxCC,WAAW,EAAE;QACf,CAAC;MAEL,CAAC;MACDC,OAAO,EAAE;QACPC,MAAM,EAAE;UACJC,CAAC,EAAE;YACDC,WAAW,EAAE;UACf;QACF;MACJ;IACF,CAAC,CAAC;EACJ,CAAC;EAGD5C,SAAS,CAAC,MAAM;IACdc,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAGNd,SAAS,CAAC,MAAM;IACd,IAAIW,QAAQ,CAACkC,MAAM,GAAG,CAAC,EAAE;MACnBlC,QAAQ,CAACmC,IAAI,CAAC,CAACC,CAAC,EAACC,CAAC,KAAGA,CAAC,CAACT,SAAS,GAACQ,CAAC,CAACR,SAAS,CAAC;MAC7C,IAAG1B,QAAQ,EAAEc,KAAK,CAACC,OAAO,CAAC,CAAC;MAC5BF,WAAW,CAAC,CAAC;IACf;EACN,CAAC,EAAE,CAACf,QAAQ,CAAC,CAAC;EAEd,oBACEP,OAAA,CAAAE,SAAA;IAAA2C,QAAA,eACI7C,OAAA;MAAK8C,SAAS,EAAC,OAAO;MAAAD,QAAA,eACtB7C,OAAA;QAAQ+C,EAAE,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB;EAAC,gBACR,CAAC;AAEP;AAAC9C,EAAA,CAlEuBF,SAAS;AAAAiD,EAAA,GAATjD,SAAS;AAAA,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}