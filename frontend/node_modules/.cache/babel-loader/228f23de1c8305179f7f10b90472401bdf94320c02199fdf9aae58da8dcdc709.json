{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ONKAR\\\\OneDrive\\\\Desktop\\\\SEM-4\\\\Projects\\\\DBMS\\\\crop sowing guide\\\\frontend\\\\src\\\\components\\\\RegionCropDistribution.jsx\",\n  _s = $RefreshSig$();\nimport react from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { Chart } from \"chart.js/auto\";\nimport \"../css/CropDistribution.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function RegionCropdistribution(props) {\n  _s();\n  let chart;\n  const {\n    state,\n    crops\n  } = props;\n  const {\n    division\n  } = useParams();\n  const states = [\"maharashtra\", \"uttarpradesh\", \"madhyapradesh\", \"westbengal\", \"punjab\"];\n  let backurl = \"\";\n  if (state === \"Maharashtra\") {\n    backurl = states[0];\n  } else if (state == \"Uttar Pradesh\") {\n    backurl = states[1];\n  } else if (state == \"Madhya Pradesh\") {\n    backurl = states[2];\n  } else if (state == \"West Bengal\") {\n    backurl = states[3];\n  } else if (state == \"Punjab\") {\n    backurl = states[4];\n  }\n  const croplist = Object.keys(crops);\n  let [cropdata, setCropdata] = useState([]);\n  const fetchCropData = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/cropdivisionreview\", {\n        method: \"post\",\n        body: JSON.stringify({\n          state: state,\n          crops: croplist,\n          division: division\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await response.json();\n      setCropdata(data.data);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  const createChart = () => {\n    const ctx = document.getElementById(\"myChart\");\n    chart = new Chart(ctx, {\n      type: \"bar\",\n      data: {\n        labels: croplist,\n        datasets: [{\n          label: \"Crop area\",\n          data: cropdata,\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  };\n  useEffect(() => {\n    fetchCropData();\n  }, []);\n  useEffect(() => {\n    if (cropdata.length > 0) {\n      if (chart) chart.destroy();\n      createChart();\n    }\n  }, [cropdata]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navCropDistribution\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"containerCropDistribution\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: division\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: `/${backurl}`,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"crop_sowingdata_bar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graphBlock\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            fontFamily: \"sans-serif\",\n            fontWeight: 600,\n            color: \"blueviolet\",\n            marginBottom: \"20px\"\n          },\n          children: [\"Crop Sowing Ratio in \", division]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: 800,\n            height: 400\n          },\n          children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n            id: \"myChart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(RegionCropdistribution, \"a6BpGlGZ2doDJMh4oGAQih59568=\", false, function () {\n  return [useParams];\n});\n_c = RegionCropdistribution;\nvar _c;\n$RefreshReg$(_c, \"RegionCropdistribution\");","map":{"version":3,"names":["react","useState","useEffect","useParams","Link","Chart","jsxDEV","_jsxDEV","Fragment","_Fragment","RegionCropdistribution","props","_s","chart","state","crops","division","states","backurl","croplist","Object","keys","cropdata","setCropdata","fetchCropData","response","fetch","method","body","JSON","stringify","headers","data","json","error","console","createChart","ctx","document","getElementById","type","labels","datasets","label","borderWidth","options","scales","y","beginAtZero","length","destroy","children","className","class","fileName","_jsxFileName","lineNumber","columnNumber","to","style","fontFamily","fontWeight","color","marginBottom","width","height","id","_c","$RefreshReg$"],"sources":["C:/Users/ONKAR/OneDrive/Desktop/SEM-4/Projects/DBMS/crop sowing guide/frontend/src/components/RegionCropDistribution.jsx"],"sourcesContent":["import react from \"react\";\r\nimport { useState,useEffect} from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Chart } from \"chart.js/auto\";\r\nimport \"../css/CropDistribution.css\";\r\n\r\nexport default function RegionCropdistribution(props){\r\n    let chart;\r\n    const {state,crops} = props;\r\n    const {division} = useParams();\r\n    const states = [\"maharashtra\",\"uttarpradesh\",\"madhyapradesh\",\"westbengal\",\"punjab\"];\r\n  let backurl = \"\";\r\n  if(state === \"Maharashtra\"){\r\n    backurl=states[0];\r\n  }\r\n  else if(state == \"Uttar Pradesh\"){\r\n    backurl=states[1];\r\n  }\r\n  else if(state == \"Madhya Pradesh\"){\r\n    backurl=states[2];\r\n  }\r\n  else if(state == \"West Bengal\"){\r\n    backurl=states[3];\r\n  }\r\n  else if(state == \"Punjab\"){\r\n    backurl=states[4];\r\n  }\r\n    const croplist = Object.keys(crops);\r\n    let [cropdata, setCropdata] = useState([]);\r\n    const fetchCropData = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:5000/cropdivisionreview\", {\r\n          method: \"post\",\r\n          body: JSON.stringify({ state: state, crops:croplist,division:division }),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        });\r\n        const data = await response.json();\r\n        setCropdata(data.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n    const createChart = () => {\r\n      const ctx = document.getElementById(\"myChart\");\r\n      chart = new Chart(ctx, {\r\n        type: \"bar\",\r\n        data: {\r\n          labels: croplist,\r\n          datasets: [\r\n            {\r\n              label: \"Crop area\",\r\n              data: cropdata,\r\n              borderWidth: 1,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n            },\r\n          },\r\n        },\r\n      });\r\n    };\r\n  \r\n    useEffect(() => {\r\n      fetchCropData();\r\n    }, []);\r\n  \r\n    useEffect(() => {\r\n      if (cropdata.length > 0) {\r\n        if(chart) chart.destroy();\r\n        createChart();\r\n      }\r\n    }, [cropdata]);\r\n    return(\r\n        <>\r\n        <nav className=\"navCropDistribution\">\r\n        <div class=\"containerCropDistribution\">\r\n         <h1>{division}</h1>\r\n        </div>\r\n        <Link to={`/${backurl}`}>Back</Link>\r\n    </nav>\r\n        <div className=\"crop_sowingdata_bar\">\r\n        <div className=\"graphBlock\">\r\n          <h3\r\n            style={{\r\n              fontFamily: \"sans-serif\",\r\n              fontWeight: 600,\r\n              color: \"blueviolet\",\r\n              marginBottom: \"20px\",\r\n            }}\r\n          >\r\n            Crop Sowing Ratio in {division}\r\n          </h3>\r\n          <div style={{ width: 800, height: 400 }}>\r\n            <canvas id=\"myChart\"></canvas>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n        </>\r\n    )\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAACC,SAAS,QAAO,OAAO;AACzC,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,KAAK,QAAQ,eAAe;AACrC,OAAO,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAErC,eAAe,SAASC,sBAAsBA,CAACC,KAAK,EAAC;EAAAC,EAAA;EACjD,IAAIC,KAAK;EACT,MAAM;IAACC,KAAK;IAACC;EAAK,CAAC,GAAGJ,KAAK;EAC3B,MAAM;IAACK;EAAQ,CAAC,GAAGb,SAAS,CAAC,CAAC;EAC9B,MAAMc,MAAM,GAAG,CAAC,aAAa,EAAC,cAAc,EAAC,eAAe,EAAC,YAAY,EAAC,QAAQ,CAAC;EACrF,IAAIC,OAAO,GAAG,EAAE;EAChB,IAAGJ,KAAK,KAAK,aAAa,EAAC;IACzBI,OAAO,GAACD,MAAM,CAAC,CAAC,CAAC;EACnB,CAAC,MACI,IAAGH,KAAK,IAAI,eAAe,EAAC;IAC/BI,OAAO,GAACD,MAAM,CAAC,CAAC,CAAC;EACnB,CAAC,MACI,IAAGH,KAAK,IAAI,gBAAgB,EAAC;IAChCI,OAAO,GAACD,MAAM,CAAC,CAAC,CAAC;EACnB,CAAC,MACI,IAAGH,KAAK,IAAI,aAAa,EAAC;IAC7BI,OAAO,GAACD,MAAM,CAAC,CAAC,CAAC;EACnB,CAAC,MACI,IAAGH,KAAK,IAAI,QAAQ,EAAC;IACxBI,OAAO,GAACD,MAAM,CAAC,CAAC,CAAC;EACnB;EACE,MAAME,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACN,KAAK,CAAC;EACnC,IAAI,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMuB,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;QACvEC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEhB,KAAK,EAAEA,KAAK;UAAEC,KAAK,EAACI,QAAQ;UAACH,QAAQ,EAACA;QAAS,CAAC,CAAC;QACxEe,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClCV,WAAW,CAACS,IAAI,CAACA,IAAI,CAAC;IACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EACD,MAAME,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAC;IAC9C1B,KAAK,GAAG,IAAIR,KAAK,CAACgC,GAAG,EAAE;MACrBG,IAAI,EAAE,KAAK;MACXR,IAAI,EAAE;QACJS,MAAM,EAAEtB,QAAQ;QAChBuB,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,WAAW;UAClBX,IAAI,EAAEV,QAAQ;UACdsB,WAAW,EAAE;QACf,CAAC;MAEL,CAAC;MACDC,OAAO,EAAE;QACPC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDC,WAAW,EAAE;UACf;QACF;MACF;IACF,CAAC,CAAC;EACJ,CAAC;EAED9C,SAAS,CAAC,MAAM;IACdsB,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAENtB,SAAS,CAAC,MAAM;IACd,IAAIoB,QAAQ,CAAC2B,MAAM,GAAG,CAAC,EAAE;MACvB,IAAGpC,KAAK,EAAEA,KAAK,CAACqC,OAAO,CAAC,CAAC;MACzBd,WAAW,CAAC,CAAC;IACf;EACF,CAAC,EAAE,CAACd,QAAQ,CAAC,CAAC;EACd,oBACIf,OAAA,CAAAE,SAAA;IAAA0C,QAAA,gBACA5C,OAAA;MAAK6C,SAAS,EAAC,qBAAqB;MAAAD,QAAA,gBACpC5C,OAAA;QAAK8C,KAAK,EAAC,2BAA2B;QAAAF,QAAA,eACrC5C,OAAA;UAAA4C,QAAA,EAAKnC;QAAQ;UAAAsC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf,CAAC,eACNlD,OAAA,CAACH,IAAI;QAACsD,EAAE,EAAG,IAAGxC,OAAQ,EAAE;QAAAiC,QAAA,EAAC;MAAI;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,eACFlD,OAAA;MAAK6C,SAAS,EAAC,qBAAqB;MAAAD,QAAA,eACpC5C,OAAA;QAAK6C,SAAS,EAAC,YAAY;QAAAD,QAAA,gBACzB5C,OAAA;UACEoD,KAAK,EAAE;YACLC,UAAU,EAAE,YAAY;YACxBC,UAAU,EAAE,GAAG;YACfC,KAAK,EAAE,YAAY;YACnBC,YAAY,EAAE;UAChB,CAAE;UAAAZ,QAAA,GACH,uBACsB,EAACnC,QAAQ;QAAA;UAAAsC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC,eACLlD,OAAA;UAAKoD,KAAK,EAAE;YAAEK,KAAK,EAAE,GAAG;YAAEC,MAAM,EAAE;UAAI,CAAE;UAAAd,QAAA,eACtC5C,OAAA;YAAQ2D,EAAE,EAAC;UAAS;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA,eAEF,CAAC;AAEX;AAAC7C,EAAA,CApGuBF,sBAAsB;EAAA,QAGvBP,SAAS;AAAA;AAAAgE,EAAA,GAHRzD,sBAAsB;AAAA,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}