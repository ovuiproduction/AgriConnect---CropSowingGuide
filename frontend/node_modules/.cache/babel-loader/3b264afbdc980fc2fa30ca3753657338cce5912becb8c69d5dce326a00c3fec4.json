{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ONKAR\\\\OneDrive\\\\Desktop\\\\SEM-4\\\\Projects\\\\DBMS\\\\crop sowing guide\\\\frontend\\\\src\\\\components\\\\Area.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../css/CropDistribution.css\";\nimport Chart from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Area(props) {\n  _s();\n  let [cropdata, setCropdata] = useState([]);\n  let [cropnames, setCropnames] = useState([]);\n  let [cropArea, setCropArea] = useState([]);\n  const fetchCropData = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/getArea\", {\n        method: \"post\",\n        body: JSON.stringify({}),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await response.json();\n      setCropdata(data.data);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  //   const createChart = () => {\n  //     const ctx = document.getElementById(\"myChart\");\n  //     new Chart(ctx, {\n  //       type: \"bar\",\n  //       data: {\n  //         labels: [\"Soyabean\",\"Wheat\",\"Maize\",\"Tea\",\"Jowar\",\"Onion\"],\n  //         datasets: [\n  //           {\n  //             label: \"Crop area\",\n  //             data: cropdata,\n  //             borderWidth: 1,\n  //           },\n  //         ],\n  //       },\n  //       options: {\n  //         scales: {\n  //           y: {\n  //             beginAtZero: true,\n  //           },\n  //         },\n  //       },\n  //     });\n  //   };\n\n  useEffect(() => {\n    fetchCropData();\n  }, []);\n  useEffect(() => {\n    if (cropdata.length > 0) {\n      let ids = setCropArea();\n      createChart();\n    }\n  }, [cropdata]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navCropDistribution\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"containerCropDistribution\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Area\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_s(Area, \"HJQEs4d7gekiENC/zlqqY2K82pY=\");\n_c = Area;\nvar _c;\n$RefreshReg$(_c, \"Area\");","map":{"version":3,"names":["React","useEffect","useState","Link","Chart","jsxDEV","_jsxDEV","Fragment","_Fragment","Area","props","_s","cropdata","setCropdata","cropnames","setCropnames","cropArea","setCropArea","fetchCropData","response","fetch","method","body","JSON","stringify","headers","data","json","error","console","length","ids","createChart","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ONKAR/OneDrive/Desktop/SEM-4/Projects/DBMS/crop sowing guide/frontend/src/components/Area.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport \"../css/CropDistribution.css\";\r\nimport Chart from \"chart.js/auto\";\r\n\r\nexport default function Area(props) {\r\n  let [cropdata, setCropdata] = useState([]);\r\n  let [cropnames,setCropnames] = useState([]);\r\n  let [cropArea,setCropArea] = useState([]);\r\n\r\n  const fetchCropData = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/getArea\", {\r\n        method: \"post\",\r\n        body: JSON.stringify({}),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n      const data = await response.json();\r\n      setCropdata(data.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n\r\n//   const createChart = () => {\r\n//     const ctx = document.getElementById(\"myChart\");\r\n//     new Chart(ctx, {\r\n//       type: \"bar\",\r\n//       data: {\r\n//         labels: [\"Soyabean\",\"Wheat\",\"Maize\",\"Tea\",\"Jowar\",\"Onion\"],\r\n//         datasets: [\r\n//           {\r\n//             label: \"Crop area\",\r\n//             data: cropdata,\r\n//             borderWidth: 1,\r\n//           },\r\n//         ],\r\n//       },\r\n//       options: {\r\n//         scales: {\r\n//           y: {\r\n//             beginAtZero: true,\r\n//           },\r\n//         },\r\n//       },\r\n//     });\r\n//   };\r\n\r\n  useEffect(() => {\r\n    fetchCropData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (cropdata.length > 0) {\r\n      let ids = \r\n      setCropArea()\r\n      createChart();\r\n\r\n    }\r\n  }, [cropdata]);\r\n\r\n  return (\r\n    <>\r\n    <nav className=\"navCropDistribution\">\r\n        <div className=\"containerCropDistribution\">\r\n         <h1>Area</h1>\r\n        </div>\r\n        {/* <Link to={`/${backurl}`}>Back</Link> */}\r\n    </nav>\r\n      {/* <div className=\"crop_sowingdata_bar\">\r\n        <div classNameName=\"prevyeargraph\">\r\n          <h2\r\n            style={{\r\n              fontFamily: \"sans-serif\",\r\n              fontWeight: 600,\r\n              color: \"blueviolet\",\r\n            }}\r\n          >\r\n            {crop} Sowing Distribution in {state}\r\n          </h2>\r\n          <div style={{ width: 800, height: 400 }}>\r\n            <canvas id=\"myChart\"></canvas>\r\n          </div>\r\n        </div>\r\n      </div> */}\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAAQC,IAAI,QAAO,kBAAkB;AACrC,OAAO,6BAA6B;AACpC,OAAOC,KAAK,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElC,eAAe,SAASC,IAAIA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAClC,IAAI,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,IAAI,CAACY,SAAS,EAACC,YAAY,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC3C,IAAI,CAACc,QAAQ,EAACC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAEzC,MAAMgB,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;QAC5DC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC;QACxBC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClCd,WAAW,CAACa,IAAI,CAACA,IAAI,CAAC;IACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;;EAEH;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEE3B,SAAS,CAAC,MAAM;IACdiB,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAENjB,SAAS,CAAC,MAAM;IACd,IAAIW,QAAQ,CAACkB,MAAM,GAAG,CAAC,EAAE;MACvB,IAAIC,GAAG,GACPd,WAAW,CAAC,CAAC;MACbe,WAAW,CAAC,CAAC;IAEf;EACF,CAAC,EAAE,CAACpB,QAAQ,CAAC,CAAC;EAEd,oBACEN,OAAA,CAAAE,SAAA;IAAAyB,QAAA,eACA3B,OAAA;MAAK4B,SAAS,EAAC,qBAAqB;MAAAD,QAAA,eAChC3B,OAAA;QAAK4B,SAAS,EAAC,2BAA2B;QAAAD,QAAA,eACzC3B,OAAA;UAAA2B,QAAA,EAAI;QAAI;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEL;EAAC,gBAiBJ,CAAC;AAEP;AAAC3B,EAAA,CApFuBF,IAAI;AAAA8B,EAAA,GAAJ9B,IAAI;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}